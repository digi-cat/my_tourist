# Generated by Django 3.1.4 on 2020-12-28 07:29

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Region',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('code', models.CharField(max_length=2, primary_key=True, serialize=False, verbose_name='Код региона')),
                ('id', models.CharField(max_length=15, unique=True, verbose_name='Идентификатор(ы) региона в ВК')),
                ('region', models.CharField(max_length=60, verbose_name='Название региона в Яндекс')),
                ('title', models.CharField(max_length=60, verbose_name='Название региона')),
                ('paths', models.TextField(blank=True, null=True, verbose_name='Контуры')),
                ('polygons', models.TextField(blank=True, null=True, verbose_name='Полигоны')),
                ('population', models.IntegerField(default=0, verbose_name='Численность')),
                ('is_pub', models.BooleanField(default=False, verbose_name='Публиковать')),
            ],
            options={
                'verbose_name': 'Регион',
                'verbose_name_plural': 'Регионы',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='RegionResponsible',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('code', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='responsible_code', to='map.region', verbose_name='Код региона')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responsible_regions', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Ответственный',
                'verbose_name_plural': 'Ответственные',
            },
        ),
        migrations.CreateModel(
            name='RegionCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('yandex_email', models.CharField(blank=True, max_length=40, null=True, verbose_name='Логин в Яндекс')),
                ('yandex_pass', models.CharField(blank=True, max_length=40, null=True, verbose_name='Пароль в Яндекс')),
                ('vk_email', models.CharField(blank=True, max_length=40, null=True, verbose_name='Логин в ВК (email)')),
                ('vk_pass', models.CharField(blank=True, max_length=40, null=True, verbose_name='Пароль в ВК')),
                ('vk_account_id', models.IntegerField(blank=True, null=True, verbose_name='ID рекламного кабинета в ВК')),
                ('code', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='credentials_codes', to='map.region', verbose_name='Код региона')),
            ],
            options={
                'verbose_name': 'Аккаунты в соцсетях',
                'verbose_name_plural': 'Аккаунты в соцсетях',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='HeatMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('date', models.DateField(auto_now=True, verbose_name='Дата')),
                ('tourism_type', models.CharField(choices=[('travel', 'Путешествия'), ('excursion', 'Экскурсии'), ('spa', 'SPA и оздоровление'), ('extreme', 'Активный отдых и экстрим'), ('outdoor', 'Развлечения и общение')], default='travel', max_length=10, verbose_name='Вид туризма')),
                ('qty', models.FloatField(default=0, verbose_name='Число показов')),
                ('popularity', models.FloatField(default=0, verbose_name='Региональная популярность')),
                ('popularity_norm', models.FloatField(default=0, verbose_name='Нормализованная популярность')),
                ('code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heatmap_codes', to='map.region', verbose_name='Регион')),
                ('global_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heatmap_global_codes', to='map.region', verbose_name='Регион портала')),
            ],
            options={
                'verbose_name': 'Данные тепловой карты',
                'verbose_name_plural': 'Данные тепловой карты',
                'ordering': ('-date', 'tourism_type', 'global_code', 'code'),
            },
        ),
        migrations.CreateModel(
            name='Audience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('date', models.DateField(auto_now=True)),
                ('sex', models.CharField(choices=[('1', 'Женщины'), ('2', 'Мужчины')], max_length=1, verbose_name='Пол')),
                ('age', models.CharField(choices=[('18-24', 'от 18 до 24 лет'), ('25-29', 'от 25 до 29 лет'), ('30-34', 'от 30 до 34 лет'), ('35-44', 'от 35 до 44 лет'), ('45-80', 'от 45 до 80 лет')], max_length=5, verbose_name='Возраст')),
                ('tourism_type', models.CharField(choices=[('travel', 'Путешествия'), ('excursion', 'Экскурсии'), ('spa', 'SPA и оздоровление'), ('extreme', 'Активный отдых и экстрим'), ('outdoor', 'Развлечения и общение')], max_length=10, verbose_name='Вид туризма')),
                ('v_all', models.IntegerField(default=0, verbose_name='Общее число по региону')),
                ('v_types', models.IntegerField(default=0, verbose_name='Общее число заинтересованных в туризме')),
                ('v_type_sex_age', models.IntegerField(default=0, verbose_name='Заинтересованные, разбивка: вид туризма, пол, возраст')),
                ('v_sex_age', models.IntegerField(default=0, verbose_name='Число определенного пола и возраста')),
                ('v_sex_age_child_6', models.IntegerField(default=0, verbose_name='Число определенного пола и возраста с детьми до 6 лет')),
                ('v_sex_age_child_7_12', models.IntegerField(default=0, verbose_name='Число определенного пола и возраста с детьми от 7 до 12 лет')),
                ('v_sex_age_parents', models.IntegerField(default=0, verbose_name='Число определенного пола и возраста с родителями')),
                ('v_type_in_pair', models.IntegerField(default=0, verbose_name='Число определенного пола и возраста с интересом к виду туризма и в паре')),
                ('code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audience_codes', to='map.region', verbose_name='Регион')),
            ],
            options={
                'verbose_name': 'Данные об аудитории',
                'verbose_name_plural': 'Данные об аудитории',
            },
        ),
        migrations.CreateModel(
            name='Salary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('sex', models.CharField(choices=[('1', 'Женщины'), ('2', 'Мужчины')], max_length=1, verbose_name='Пол')),
                ('age', models.CharField(choices=[('18-24', 'от 18 до 24 лет'), ('25-29', 'от 25 до 29 лет'), ('30-34', 'от 30 до 34 лет'), ('35-44', 'от 35 до 44 лет'), ('45-80', 'от 45 до 80 лет')], max_length=5, verbose_name='Возраст')),
                ('s020', models.FloatField(default=0, verbose_name='Доля зарплаты от 0 до 20 т.р.')),
                ('s2045', models.FloatField(default=0, verbose_name='Доля зарплаты от 20 до 45 т.р.')),
                ('s45', models.FloatField(default=0, verbose_name='Доля зарплаты от 45 т.р.')),
                ('code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salary_codes', to='map.region', verbose_name='Регион')),
            ],
            options={
                'verbose_name': 'Распределение уровня заработной платы',
                'verbose_name_plural': 'Распределение уровня заработной платы',
                'ordering': ('code', 'sex', 'age'),
                'unique_together': {('code', 'sex', 'age')},
            },
        ),
        migrations.AddIndex(
            model_name='heatmap',
            index=models.Index(fields=['popularity_norm'], name='map_heatmap_popular_2fdf12_idx'),
        ),
        migrations.AddIndex(
            model_name='heatmap',
            index=models.Index(fields=['code', 'date', 'global_code', 'tourism_type'], name='map_heatmap_code_id_2f938e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='heatmap',
            unique_together={('date', 'tourism_type', 'global_code', 'code')},
        ),
        migrations.AddIndex(
            model_name='audience',
            index=models.Index(fields=['code'], name='map_audienc_code_id_51c0a8_idx'),
        ),
        migrations.AddIndex(
            model_name='audience',
            index=models.Index(fields=['tourism_type'], name='map_audienc_tourism_e4972f_idx'),
        ),
        migrations.AddIndex(
            model_name='audience',
            index=models.Index(fields=['v_type_sex_age'], name='map_audienc_v_type__58c925_idx'),
        ),
        migrations.AddIndex(
            model_name='audience',
            index=models.Index(fields=['code', 'tourism_type'], name='map_audienc_code_id_f30d85_idx'),
        ),
        migrations.AddIndex(
            model_name='audience',
            index=models.Index(fields=['code', 'tourism_type', 'sex'], name='map_audienc_code_id_3d2362_idx'),
        ),
        migrations.AddIndex(
            model_name='audience',
            index=models.Index(fields=['code', 'tourism_type', 'sex', 'age'], name='map_audienc_code_id_4a7d05_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='audience',
            unique_together={('date', 'code', 'sex', 'age', 'tourism_type')},
        ),
    ]
